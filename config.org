#+TITLE: Current Emacs (v30) config
#+AUTHOR: Daniel Elnatan
#+STARTUP: overview

My second attempt at customizing Emacs (Running ~emacs-plus@30~ installed via ~homebrew~).

* Basic settings

#+begin_src emacs-lisp
(set-default-coding-systems 'utf-8)
(setq inhibit-startup-message t)
(setq custom-safe-themes t)
(column-number-mode)

;; use visual-line-mode only when programming or in org-mode
(add-hook 'prog-mode-hook 'visual-line-mode)
(add-hook 'org-mode-hook 'visual-line-mode)

;; use smooth scrolling like most modern apps
(pixel-scroll-precision-mode)

;; show current line highlight
;; (global-hl-line-mode 1)

;; enable global auto revert (refresh buffer if there's file changes)
(global-auto-revert-mode 1)
(setq make-backup-files nil)
(setq auto-revert-verbose nil)

;; use y/n for yes-or-no
;; since Emacs 29 `yes-or-no-p` will use `y-or-n-p`
(setq use-short-answers t) 

;; I only want to show line numbers in programming mode.
(add-hook 'prog-mode-hook 'display-line-numbers-mode)

;; keep things tidy
(use-package no-littering
  :straight t)

;; for programming set fill to 80 columns and display column indicator
(setq-default fill-column 79)
(add-hook 'prog-mode-hook #'display-fill-column-indicator-mode)

;; enable recent-file mode
(recentf-mode 1)
(setq recentf-max-saved-items 30)

;; Open recent files 
(global-set-key (kbd "C-c r") 'recentf-open-files)

;; map C-x C-b to `ibuffer`
(define-key ctl-x-map "\C-b" 'ibuffer)

;; refresh dired if file is changed on disk
(setq dired-auto-revert-buffer t)

;; enable side scrolling with mouse wheel
(setq mouse-wheel-tilt-scroll t)
;; reverse mouse direction for a more natural swipe feel
(setq mouse-wheel-flip-direction t)

;; enable automatic parenthesis pairing
(electric-pair-mode 1)

;; create a new frame with *scratch* buffer
(defun new-frame ()
  (interactive)
  (select-frame (make-frame))
  (switch-to-buffer "*scratch*"))
(global-set-key (kbd "M-s-n") 'new-frame)
(global-set-key (kbd "M-`") 'other-frame)

;; Kill current buffer (instead of asking first buffer name)
(global-set-key (kbd "C-x k") 'kill-current-buffer)

;; unbind annoying text-scaling with Ctrl-mouse wheel
(global-unset-key (kbd "C-<wheel-up>"))
(global-unset-key (kbd "C-<wheel-down>"))
(global-unset-key (kbd "C-<mouse-5>"))
(global-unset-key (kbd "C-<mouse-4>"))

;; Close frame if not the last, kill emacs else
(defun de/delete-frame-or-kill-emacs ()
  "Delete frame or kill Emacs if there is only one frame."
  (interactive)
  (if (> (length (frame-list)) 1)
      (delete-frame)
    (save-buffers-kill-terminal)))
(global-set-key (kbd "C-x C-c") 'de/delete-frame-or-kill-emacs)

#+end_src

Customize ~ibuffer~ to show things by groups. To disable filtering (remove all filter groups) do =/ \= while in ibuffer mode. Then if you want to re-apply the saved filter group, do =/ R=.

#+begin_src emacs-lisp
;; Enable ibuffer
(require 'ibuffer)

;; Define custom groups for ibuffer
;; add commonly used modes below
(setq ibuffer-saved-filter-groups
      '(("default"
         ("Dired" (mode . dired-mode))
	 ("Web" (or (mode . tsx-ts-mode)
		    (mode . js-ts-mode)
		    (mode . js-json-mode)))
         ("Python" (or (mode . python-mode)
                       (mode . python-ts-mode)))
	 ("Rust" (mode . rust-ts-mode))
         ("Org" (mode . org-mode))
    	 ("Jupyter" (mode . jupyter-repl-mode))
         ("Emacs" (or (name . "^\\*scratch\\*$")
                      (name . "^\\*Messages\\*$")))
	 ("Document" (or (mode . pdf-view-mode)
			 (mode . doc-view-mode)))
         ("Help" (or (name . "^\\*Help\\*$")
                     (name . "^\\*Apropos\\*$")
                     (name . "^\\*info\\*$"))))))

;; Set the default filter group
(add-hook 'ibuffer-mode-hook
          (lambda ()
            (ibuffer-switch-to-saved-filter-groups "default")))

;; Enable ibuffer auto-mode
(setq ibuffer-expert t)
(setq ibuffer-show-empty-filter-groups nil)
#+end_src

Use multiple cursors
#+begin_src emacs-lisp
(use-package multiple-cursors
  :straight t
  :bind (("C->" . mc/mark-next-like-this)
         ("C-<" . mc/mark-previous-like-this)
         ("C-S-c C-S-c" . mc/edit-lines)
         ("C-S-<mouse-1>" . mc/add-cursor-on-click))
  )
#+end_src

Emacs will automatically create backup files in the same folder as the current directory, but this creates a lot of clutter, so let's just move all the files into a hidden folder
#+begin_src emacs-lisp
(setq backup-directory-alist '(("" . "~/.emacs.d/bak")))

(setq auto-save-file-name-transforms
      '((".*" "~/.emacs.d/bak/autosaves" t)))
(setq backup-by-copying t ; use copying to create backup files
      delete-old-versions t ; delete excess backup files
      kept-new-versions 4
      kept-old-versions 2
      version-control t)
#+end_src

Using the workflow from [[https://www.reddit.com/r/emacs/comments/910pga/tip_how_to_use_ivy_and_its_utilities_in_your/][TIP: How to use Ivy and its utilities in your workflow]] (reddit r/emacs). I like using 'swiper' in place of the built-in isearch, so the standard =C-s= and =C-r= keybinding is replaced here with its corresponding version in swiper.

#+begin_src emacs-lisp
(use-package swiper
  :straight t
  :bind (("C-s" . swiper)
         ("C-r" . swiper)))

(use-package vertico
  :straight t
  :init (vertico-mode))

(use-package marginalia
  :straight t
  (:keymaps 'minibuffer-local-map
    	    "M-A" 'marginalia-cycle)
  :custom
  (marginalia-max-relative-age 0)
  (marginalia-align 'right)
  :init
  (marginalia-mode))

;; A few more useful configurations...
(use-package emacs
  :init
  ;; Add prompt indicator to `completing-read-multiple'.
  ;; We display [CRM<separator>], e.g., [CRM,] if the separator is a comma.
  (defun crm-indicator (args)
    (cons (format "[CRM%s] %s"
                  (replace-regexp-in-string
                   "\\`\\[.*?]\\*\\|\\[.*?]\\*\\'" ""
                   crm-separator)
                  (car args))
          (cdr args)))
  (advice-add #'completing-read-multiple :filter-args #'crm-indicator)

  ;; Do not allow the cursor in the minibuffer prompt
  (setq minibuffer-prompt-properties
        '(read-only t cursor-intangible t face minibuffer-prompt))
  (add-hook 'minibuffer-setup-hook #'cursor-intangible-mode)

  ;; Emacs 28: Hide commands in M-x which do not work in the current mode.
  ;; Vertico commands are hidden in normal buffers.
  ;; (setq read-extended-command-predicate
  ;;       #'command-completion-default-include-p)

  ;; Enable recursive minibuffers
  (setq enable-recursive-minibuffers t))

(use-package orderless
  :init
  ;; Configure a custom style dispatcher (see the Consult wiki)
  ;; (setq orderless-style-dispatchers '(+orderless-consult-dispatch orderless-affix-dispatch)
  ;;       orderless-component-separator #'orderless-escapable-split-on-space)
  (setq completion-styles '(orderless basic)
        completion-category-defaults nil
        completion-category-overrides '((file (styles partial-completion)))))

#+end_src

** Enhancements

Using ~dired-sidebar~ to conveniently go through files and folders in vertical minibuffer
#+begin_src emacs-lisp
;; this was taken from https://www.emacswiki.org/emacs/DiredOmitMode
(defun dired-dotfiles-toggle ()
  "Show/hide dot-files"
  (interactive)
  (when (equal major-mode 'dired-sidebar-mode)
    (if (or (not (boundp 'dired-dotfiles-show-p)) dired-dotfiles-show-p) ; if currently showing
        (progn 
          (set (make-local-variable 'dired-dotfiles-show-p) nil)
          (message "h")
          (dired-mark-files-regexp "^\\\.")
          (dired-do-kill-lines))
      (progn (revert-buffer) ; otherwise just revert to re-show
             (set (make-local-variable 'dired-dotfiles-show-p) t)))))

;; add dired-sidebar selector
(defun ibuffer-mark-dired-sidebar-buffers ()
  "Mark all `dired-sidebar' buffers."
  (interactive)
  (ibuffer-mark-on-buffer
   (lambda (buf) (eq (buffer-local-value 'major-mode buf) 'dired-sidebar-mode))))

;; for better quality icons, Emacs should be installed with imagemagick support
(use-package vscode-icon
  :straight t
  :commands (vscode-icon-for-file))

(use-package dired-sidebar
  :straight (:type git :host github :repo "jojojames/dired-sidebar")
  :bind (("C-x C-n" . dired-sidebar-toggle-sidebar)
         :map dired-mode-map
         ("<backtab>" . dired-dotfiles-toggle))
  :commands (dired-sidebar-toggle-sidebar)
  :init
  (add-hook 'dired-sidebar-mode-hook
            (lambda ()
              (unless (file-remote-p default-directory)
                (auto-revert-mode))))
  :config
  (push 'toggle-window-split dired-sidebar-toggle-hidden-commands)
  (push 'rotate-windows dired-sidebar-toggle-hidden-commands)
  (setq dired-sidebar-subtree-line-prefix "__")
  (setq dired-sidebar-theme 'vscode)
  (setq dired-sidebar-use-term-integration t))

(use-package ibuffer
  :straight (:type built-in)
  :config
  ;; define keymap to select all dired-sidebar modes while in ibuffer
  (define-key ibuffer-mode-map (kbd "* |") 'ibuffer-mark-dired-sidebar-buffers))

#+end_src

In terms of code folding we will use Emacs' =outline-minor-mode=, which is the same mechanism used in org-mode. 
#+begin_src emacs-lisp
;; ;; define custom function to trigger show/hide in 'outline-minor-mode'
(defun de/hide_all ()
  (interactive)
  (if outline-minor-mode
      (progn (outline-hide-body)
             (outline-hide-sublevels 1))
    (message "Outline minor mode is not enabled.")))

(add-hook 'prog-mode-hook 'outline-minor-mode)

;; remap some of the terrible default keybindings
(let ((kmap outline-minor-mode-map))
  (define-key kmap (kbd "M-<up>") 'outline-move-subtree-up)
  (define-key kmap (kbd "M-<down>") 'outline-move-subtree-down)
  (define-key kmap (kbd "<backtab>") 'outline-cycle)
  (define-key kmap (kbd "C-s-h") 'de/hide_all)
  (define-key kmap (kbd "C-s-s") 'outline-show-all))

#+end_src

I'd like to be able to toggle horizontal/vertical split when I have 2 windows open. Found in [[https://emacs.stackexchange.com/questions/318/switch-window-split-orientation-fastest-way][Emacs Stackexchange]].

#+begin_src emacs-lisp
(defun de/toggle-split-direction ()
  (interactive)
  (if (= (count-windows) 2)
      (let* ((this-win-buffer (window-buffer))
             (next-win-buffer (window-buffer (next-window)))
             (this-win-edges (window-edges (selected-window)))
             (next-win-edges (window-edges (next-window)))
             (this-win-2nd (not (and (<= (car this-win-edges)
                                         (car next-win-edges))
                                     (<= (cadr this-win-edges)
                                         (cadr next-win-edges)))))
             (splitter
              (if (= (car this-win-edges)
                     (car (window-edges (next-window))))
                  'split-window-horizontally
                'split-window-vertically)))
        (delete-other-windows)
        (let ((first-win (selected-window)))
          (funcall splitter)
          (if this-win-2nd (other-window 1))
          (set-window-buffer (selected-window) this-win-buffer)
          (set-window-buffer (next-window) next-win-buffer)
          (select-window first-win)
          (if this-win-2nd (other-window 1))))))

(global-set-key (kbd "C-x |")  'de/toggle-split-direction)

#+end_src

** Navigation

I seldom use =C-v= or =M-v= to move page-by-page. So here I rebind these keybindings to custom functions that scrolls half-page up/down & keep things in the center for easier viewing:
#+begin_src emacs-lisp
(defun de/scroll-half-page-down ()
  (interactive)
  (move-to-window-line-top-bottom)
  (move-to-window-line-top-bottom)
  (recenter-top-bottom))

(defun de/scroll-half-page-up ()
  (interactive)
  (move-to-window-line-top-bottom)
  (recenter-top-bottom)
  (recenter-top-bottom))

(global-set-key (kbd "C-v") 'de/scroll-half-page-down)
(global-set-key (kbd "M-v") 'de/scroll-half-page-up)
#+end_src


* Programming setup

Adding rust toolchain to my ~exec-path~ variable:
#+begin_src emacs-lisp
(let ((cargo-bin-path (expand-file-name "~/.cargo/bin")))
  (when (file-directory-p cargo-bin-path)
    (add-to-list 'exec-path cargo-bin-path)
    (setenv "PATH" (concat cargo-bin-path path-separator (getenv "PATH")))))

;; add global pnpm path also
(let ((pnpm-home (expand-file-name "~/Library/pnpm")))
  (when (file-directory-p pnpm-home)
    (add-to-list 'exec-path pnpm-home)
    (setenv "PATH" (concat pnpm-home path-separator (getenv "PATH")))))
#+end_src

Setup ~treesitter~ for several languages. To tell whether the current buffer is using the ~ts~ mode is by running =M-x major-mode=.

#+begin_src emacs-lisp
(setq treesit-language-source-alist
      '((bash "https://github.com/tree-sitter/tree-sitter-bash")
    	(c "https://github.com/tree-sitter/tree-sitter-c")
    	(cmake "https://github.com/uyha/tree-sitter-cmake")
    	(css "https://github.com/tree-sitter/tree-sitter-css")
    	(elisp "https://github.com/Wilfred/tree-sitter-elisp")
    	(html "https://github.com/tree-sitter/tree-sitter-html")
    	(javascript "https://github.com/tree-sitter/tree-sitter-javascript" "master" "src")
    	(json "https://github.com/tree-sitter/tree-sitter-json")
    	(make "https://github.com/alemuller/tree-sitter-make")
	(rust "https://github.com/tree-sitter/tree-sitter-rust")
    	(markdown "https://github.com/ikatyang/tree-sitter-markdown")
    	(python "https://github.com/tree-sitter/tree-sitter-python")
    	(toml "https://github.com/tree-sitter/tree-sitter-toml")
    	(yaml "https://github.com/ikatyang/tree-sitter-yaml")))
#+end_src

At the moment, you'll have to build treesitter grammars for TypeScript manually because of some issue with creating a new temporary directory!? 

Silence eglot progress (in the *Messages* buffer)
#+begin_src emacs-lisp
(setq eglot-report-progress nil)
#+end_src

I have ~emacs-lsp-booster~ installed and setup in my ~PATH~, so I'd like to speed up LSP via ~eglot-booster~.

#+begin_src emacs-lisp
(use-package eglot
  :defer t
  :straight (:type built-in)
  :bind (:map eglot-mode-map
    	      ("C-c C-d" . eldoc)
    	      ("C-c C-f" . eglot-format-buffer))
  :hook ((python-base-mode . eglot-ensure)
    	 (python-base-mode . hs-minor-mode)
	 (rust-mode . eglot-ensure))
  :custom
  (eglot-autoshutdown t))

(use-package eglot-booster
  :straight (eglot-booster :type git :host github :repo "jdtsmith/eglot-booster")
  :after eglot
  :config (eglot-booster-mode))
#+end_src

Use ~avy~ via keybinding =M-g= as a prefix for avy. where 'c' is go to char, 't' uses a timer to type some characters, and 'l' for going to a specific line.

#+begin_src emacs-lisp
(use-package treesit-auto
  :straight (treesit-auto :type git :host github :repo "renzmann/treesit-auto")
  :config
  (global-treesit-auto-mode))

(use-package avy
  :straight t)

;; configure avy globally, use prefix M-g 
(global-set-key (kbd "M-g c") 'avy-goto-char)
(global-set-key (kbd "M-g t") 'avy-goto-char-timer)
(global-set-key (kbd "M-g l") 'avy-goto-line)

#+end_src

For general code formatting I use ~apheleia~. Python code formatting uses =ruff= installed via homebrew. Doing so will obviate installing a formatter for every Python environment.

For ~rustfmt~ and ~prettier~ you need to install those with homebrew.

#+begin_src emacs-lisp
(use-package apheleia
  :straight t
  :config
  ;; supress auto-revert warnings
  (setq apheleia-inhibit-functions
	(cons #'buffer-modified-p apheleia-inhibit-functions))
  ;; define formatters
  (setf (alist-get 'ruff apheleia-formatters)
        '("ruff" "format" "--verbose" "--line-length" "79"
	  "--stdin-filename" filepath))
  (setf (alist-get 'prettier-typescript apheleia-formatters)
	'("prettier" "--use-tabs=false" "--print-width" "80"
	  "--stdin-filename" filepath "--parser=typescript"))
  (setf (alist-get 'prettier-json apheleia-formatters)
	'("prettier" "--use-tabs=false" "--print-width" "80"
	  "--stdin-filename" filepath "--parser=json"))
  (setf (alist-get 'prettier-javascript apheleia-formatters)
	'("prettier" "--use-tabs=false" "--print-width" "80"
	  "--stdin-filename" filepath "--parser=babel-flow"))
  (setf (alist-get 'rustfmt apheleia-formatters)
        '("rustfmt" "--config"
          "max_width=80,hard_tabs=false,tab_spaces=4,use_small_heuristics=Off" filepath))
  ;; define commands for each mode
  (setf (alist-get 'python-ts-mode apheleia-mode-alist) '(ruff-isort ruff))
  (setf (alist-get 'rust-ts-mode apheleia-mode-alist) 'rustfmt)
  (setf (alist-get 'tsx-ts-mode apheleia-mode-alist) 'prettier-typescript)
  (setf (alist-get 'js-ts-mode apheleia-mode-alist) 'prettier-javascript)
  :hook (prog-mode . apheleia-mode))

(require 'apheleia)
#+end_src

Use ~corfu~ for autocompletion. You can use multiple words to filter your search by using a separator, which is bound to the key =M-<space>= when a pop-up box is on the screen. Sometimes the partial match can get in the way of doing things, like choosing to rename your file to something else that is a sub/superset of the string. Do =M-<enter>= to enter the literal entry, rather than the match.

#+begin_src emacs-lisp
(use-package corfu
  :straight t
  :custom
  (tab-always-indent 'complete)
  (completion-cycle-threshold nil)
  (corfu-cycle t) ;; allow cycling through candidates
  (corfu-auto t) ;; enable auto completion
  (corfu-quit-no-match 'separator) ;; or t
  (corfu-auto-delay 0.1)
  (corfu-echo-documentation nil)
  (corfu-popupinfo-delay '(0.3 . 0.15))
  :init
  (global-corfu-mode)
  (corfu-popupinfo-mode))

;; add corfu extension
(use-package cape
  :straight t
  :bind (("C-c p p" . completion-at-point)
    	 ("C-c p \\" . cape-tex)
    	 ("C-c p _" . cape-tex)
    	 ("C-c p ^" . cape-tex)
    	 ("C-c p f" . cape-file)
    	 ("C-c p d" . cape-dabbrev)
    	 ("C-c p s" . cape-elisp-symbol)
    	 ("C-c p e" . cape-elisp-block))
  :init
  (add-to-list 'completion-at-point-functions #'cape-dabbrev)
  (add-to-list 'completion-at-point-functions #'cape-file)
  (add-to-list 'completion-at-point-functions #'cape-tex)
  (add-to-list 'completion-at-point-functions #'cape-elisp-block))

  ;; (defun de/my-cape-tex-advice (orig-fun &rest args)
  ;;   "Advice for cape-tex to allow single-character completion"
  ;;   (let ((cape-tex-prefix-required nil))
  ;;     (apply orig-fun args)))

  ;; (advice-add 'cape-tex :around #'de/my-cape-tex-advice))

#+end_src

** Python

Setup your MacOS Python environment with ~micromamba~ first and create a /default/ Python called ~utils~ for convenience of having a 'default' Python environment.

#+begin_src emacs-lisp
;; use treesitter
(use-package python
  :config
  (define-key python-ts-mode-map (kbd "s-[") 'python-indent-shift-left)
  (define-key python-ts-mode-map (kbd "s-]") 'python-indent-shift-right)
  )

(use-package micromamba
  :straight t
  :config
  (defun change-inferior-python ()
    (when (executable-find "ipython3")
      (setq python-shell-interpreter "ipython3"
            python-shell-interpreter-args "--simple-prompt")))
  :hook
  (micromamba-postactivate-hook . change-inferior-python)
  )

;; set 'utils' to be the default Python environment
(when (functionp 'micromamba-activate)
  (micromamba-activate "utils"))

#+end_src

#+begin_src emacs-lisp
(defun de/restart-python ()
  "Clear current inferior python buffer and restart process"
  (interactive)
  (progn (with-current-buffer "*Python*" (comint-clear-buffer))
    	 (python-shell-restart)))

;; custom function to kill current cell
(defun de/kill-cell ()
  "code-cells mode custom function to kill current cell"
  (interactive)
  (let ((beg (car (code-cells--bounds)))
    	(end (cadr (code-cells--bounds))))
    (kill-region beg end)))

(use-package code-cells
  :straight t
  :defer t
  :hook ((python-ts-mode . code-cells-mode-maybe))
  :config
  (add-to-list 'code-cells-eval-region-commands
    	       '(python-ts-mode . python-shell-send-region) t)
  :bind
  (:map
   code-cells-mode-map
   ("M-p" . code-cells-backward-cell)
   ("M-n" . code-cells-forward-cell)
   ("C-c r p" . de/restart-python)
   ("C-c d d" . de/kill-cell)
   ("M-S-<up>" . code-cells-move-cell-up)
   ("M-S-<down>" . code-cells-move-cell-down)
   ("C-c x ;" . code-cells-comment-or-uncomment)
   ("C-c C-c" . code-cells-eval)))
#+end_src

At the moment, editing org source block is broken because I'm using treesitter. If you look at ~org-src-lang-modes~, you see that "jupyter-python" is mapped to Python. See the config in [[*Jupyter setup][Jupyter setup]]

** Jupyter setup

Also include some org-mode customization to accommodate jupyter
#+begin_src emacs-lisp
(use-package jupyter
  :straight t (jupyter :type git :host github :repo "emacs-jupyter/jupyter")
  :defer t
  :bind (:map jupyter-repl-mode-map
	      ("C-c C-k" . jupyter-repl-clear-cells))
  :custom
  ;; (jupyter-eval-use-overlays t)
  (jupyter-repl-echo-eval-p t)
  (jupyter-repl-prompt-margin-width 7))

(use-package gnuplot
  :defer t
  :straight t)

;; enable languages for org-babel
(org-babel-do-load-languages
 'org-babel-load-languages
 '((emacs-lisp . t)
   (awk . t)
   (sed . t)
   (shell . t)
   (gnuplot . t)
   (python . t)
   (jupyter . t)))

;; uncomment below to override `python` language designation
;; use `jupyter-python` for jupyter and `python` for vanilla python
;; (org-babel-jupyter-override-src-block "python")

;; patch for correct handling of 'python' org source blocks
(add-to-list 'org-src-lang-modes '("python" . python-ts))

;; there seems to be already 'jupyter-python' entry in the list
;; so we remove that, then add our own with 'python-ts'
(setq org-src-lang-modes
      (cons '("jupyter-python" . python-ts)
  	    (assq-delete-all "jupyter-python" org-src-lang-modes)))
#+end_src

A typical workflow in org-mode is to use source blocks with the following tag (after running =micromamba-activate=!):
#+begin_example
  #+PROPERTY: header-args:python :session py
  #+PROPERTY: header-args:python+ :async yes
  #+PROPERTY: header-args:python+ :kernel GEManalysis

  #+begin_src python :session py :kernel GEManalysis :async yes
  <python code goes here>
  #+end_src

#+end_example

To make life a bit simpler, I've made a function to insert this snippet with the help of ChatGPT. To insert the snippet above in an org file, do =C-c j=. The ~never-export~ option tells org not to re-evaluate the entire document whenever the document is exported.
#+begin_src emacs-lisp
(defun de/insert-org-jupyter-kernel-spec ()
  "Interactively insert a Jupyter kernel spec at the beginning of an Org document.
    Ensure 'jupyter' is available, or interactively activate it using 'micromamba-activate'."
  (interactive)
  (unless (executable-find "jupyter")
    (call-interactively 'micromamba-activate)) ;; Call `micromamba-activate` interactively to ensure prompt.
  ;; Ensure 'jupyter' is available after activation attempt.
  (if (executable-find "jupyter")
      (let* ((kernelspec (jupyter-completing-read-kernelspec))
             (kernel-name (jupyter-kernelspec-name kernelspec))
             (kernel-display-name
  	      (plist-get (jupyter-kernelspec-plist kernelspec) :display_name))
             (insertion-point (point-min))
             (properties
  	      (format
  	       "#+PROPERTY: header-args:jupyter-python :session py
,#+PROPERTY: header-args:jupyter-python+ :async yes
,#+PROPERTY: header-args:jupyter-python+ :eval never-export
,#+PROPERTY: header-args:jupyter-python+ :kernel %s\n"  kernel-name)))
        (save-excursion
          (goto-char insertion-point)
          (insert properties)
          (message "Inserted Jupyter kernel spec for '%s'." kernel-display-name)))
    (message "Jupyter is not available. Please ensure it is installed and try again.")))

(defun de/org-jupyter-setup ()
  (define-key org-mode-map (kbd "C-c j") 'de/insert-org-jupyter-kernel-spec))

(add-hook 'org-mode-hook 'de/org-jupyter-setup())
#+end_src

You can navigate between org-mode blocks with keybindings =C-c C-v n/p= for next/previous blocks.

As of [2024-03-29 Fri], ansi colors in the org-mode results is not rendering correctly. This is a workaround found in the ~emacs-jupyter~ issues list:
#+begin_src emacs-lisp
(defun patch/display-ansi-colors ()
  "Fixes kernel output in emacs-jupyter"
  (ansi-color-apply-on-region (point-min) (point-max)))
(add-hook 'org-mode-hook
    	  (lambda ()
    	    (add-hook 'org-babel-after-execute-hook #'patch/display-ansi-colors)))
#+end_src

For prototyping a lot of code, I typically open a Python file and associate a jupyter console to it. Since I do this a lot, I decided to simplify this into a function:

#+begin_src emacs-lisp
(defun de/python-with-jupyter-repl
    (kernel-name &optional repl-name filename)
  "Choose jupyter kernel to open/start new Python file associated to it
    "
  ;; ~interactive~ form only constructs a list of elements that
  ;; correspond directly to the arguments of the function
  (interactive
   (let ((file (read-file-name "Open Python file: " nil nil nil)))
     (list
      ;; first argument, kernel-name
      (jupyter-kernelspec-name
       (jupyter-completing-read-kernelspec nil current-prefix-arg))
      ;; second argument, repl-name
      (if current-prefix-arg ;; if user supplies REPL name, use it
    	  (read-string "REPL name: ")
    	(file-name-base file)) ;; otherwise, use base filename
      ;; third argument, filename
      file)))
  
  ;; this means you can interactively choose what gets passed as the
  ;; arguments for the function

  ;; open or create the Python file
  (find-file filename)

  ;; start the jupyter REPL and store the client symbol
  (let ((client (jupyter-run-repl kernel-name repl-name)))
    ;; wait for REPL to start and then associate the buffer
    (sleep-for 1.0)
    (jupyter-repl-associate-buffer client)))
#+end_src


* Theme and appearance

Use Nicolas Rougier's ~nano-emacs~. For fonts (on MacOS), I install them
using ~homebrew~ cask. =brew tap homebrew/cask-fonts= and =brew install
font-roboto-mono= or =font-iosevka=.

As of [2024-05-20 Mon], trying out Nicolas' update repos to rebuild nano-emacs piece-by-piece.

#+begin_src emacs-lisp
  (use-package nano-theme
    :straight (nano-theme :type git :host github :repo "rougier/nano-theme")
    :init
    (require 'nano-theme)
    (nano-mode))
  ;; :custom
  ;; (nano-light-background "#F8F4ED")
  ;; (nano-light-foreground "#2A2523")
  ;; (nano-light-highlight "#E8E2D9")
  ;; (nano-light-subtle "#D1C8B8")
  ;; (nano-light-faded "#B8A898"))

  ;; add the following to customize nano-theme
  ;; :custom
  ;; customize light them to with `ReMarkable` colors
  ;; (nano-light-background "#F8F4ED")
  ;; (nano-light-foreground "#2A2523")
  ;; (nano-light-highlight "#E8E2D9")
  ;; (nano-light-subtle "#D1C8B8")
  ;; (nano-light-faded "#B8A898")

  ;; load nano theme
  ;; (custom-set-faces
  ;;  '(nano-mono ((t (:family "Iosevka"
  ;; 			  :height 130
  ;; 			  :weight light)))))

  (load-theme 'nano t)

  ;; this function is a workaround for emacs-plus@29 where nano-theme "Roboto
  ;; Mono" font with light weight is not rendered properly
  ;; (defun de/set-custom-fonts (&optional frame)
  ;;   "set custom fonts for current frame."
  ;;   (with-selected-frame (or frame (selected-frame))
  ;;     (set-face-attribute 'default nil :font default-fs)
  ;;     (set-face-attribute 'nano-mono nil :font nano-mono-fs)
  ;;     (set-face-attribute 'nano-italic nil :font nano-italic-fs)))

  ;; ;; for some reason, this is needed to render the fonts properly
  ;; (add-hook 'window-setup-hook 'de/set-custom-fonts)
  ;; (add-hook 'after-make-frame-functions 'de/set-custom-fonts)

  ;; setup customization of nano colors via advice
  (defun de/customize-nano-themes ()
    (set-face-attribute 'show-paren-match nil :background "#96ddcf"))

  (defun de/advise-nano-themes ()
    "Add advice to nano theme functions to set show-paren-match face."
    (advice-add 'nano-dark :after #'de/customize-nano-themes)
    (advice-add 'nano-light :after #'de/customize-nano-themes))

  (de/advise-nano-themes)

  (use-package nano-modeline
    :straight (nano-modeline :type git :host github :repo "rougier/nano-modeline")
    :hook
    (text-mode-hook nano-modeline-text-mode)
    (prog-mode-hook nano-modeline-prog-mode)
    (org-mode-hook nano-modeline-org-mode))

  ;; set nano-modeline as default
  (require 'nano-modeline)
  (nano-modeline-text-mode t)

  ;; hide the default modeline
  (setq-default mode-line-format nil)

  ;; set customization on emacs startup
  (add-hook 'emacs-startup-hook #'de/customize-nano-themes)

  ;; customize cursor after all the nano stuff
  (setq-default cursor-type '(hbar . 4))

#+end_src

The nice thing about setting up nano this way, is that we can use any other theme that we want. For example, we can apply Prot's modus themes (built-in):

# #+begin_src emacs-lisp
#   (load-theme 'modus-operandi-tinted)
# #+end_src

Minimal aesthetics to look more modern
#+begin_src emacs-lisp
;; call these after init to avoid orderof-execution problems
;; (add-hook 'after-init-hook
;;           (lambda ()
;;             (menu-bar-mode -1)
;;             (tool-bar-mode -1)
;;             (scroll-bar-mode -1)))

;; Set default frame size
(add-to-list 'default-frame-alist '(width . 80))
(add-to-list 'default-frame-alist '(height . 40))
#+end_src

I want to show the colors of hex codes in the buffer so I'm using ~rainbow-mode~.
#+begin_src emacs-lisp
(use-package rainbow-mode
  :straight t
  :hook (org-mode prog-mode))
#+end_src


* Rougier's ~notes-list~

#+begin_src emacs-lisp
;; add emacs ~app~ folder to load-path
(add-to-list 'load-path "~/Apps/emacs/notes-list")  
(add-to-list 'load-path "~/Apps/emacs/svg-tag-mode")

(use-package svg-lib
  :defer t
  :straight (svg-lib :type git :host github :repo "rougier/svg-lib"))

(use-package stripes
  :defer t
  :straight t)

(require 'notes-list)

(defun de/insert-org-note-properties ()
  "Insert common Org properties at the beginning of the document."
  (interactive)
  (let ((title (read-string "Title: "))
        (filetags (read-string "File tags: "))
        (summary (read-string "Summary: "))
        (date (format-time-string "%Y-%m-%d"))
        (icon "material/notebook"))
    (goto-char (point-min))
    (insert (format "#+TITLE: %s\n" title))
    (insert (format "#+DATE: %s\n" date))
    (insert (format "#+FILETAGS: %s\n" filetags))
    (insert (format "#+SUMMARY: %s\n" summary))
    (insert (format "#+ICON: %s\n" icon))))

(with-eval-after-load 'org
  (define-key org-mode-map (kbd "C-c i p") 'de/insert-org-note-properties))
#+end_src


* Org-mode customization

Minor reconfiguration of ~org-mode~.
#+begin_src emacs-lisp
(use-package org
  :config
  (add-hook 'org-mode-hook 'org-indent-mode)
  (setq org-confirm-babel-evaluate nil)
  ;; native syntax highlighting in source blocks
  (setq org-src-fontify-natively t)
  (setq org-src-tab-acts-natively t)
  (setq org-display-inline-images t)
  ;; don't add extra spaces in the source blocks
  (setq org-edit-src-content-indentation 0)
  (setq org-startup-with-inline-images t)
  ;; edit code block in current window rather than split in two by default
  (setq org-src-window-setup 'split-window-below)
  ;; hide emphasis markers
  (setq org-hide-emphasis-markers t)
  (setq org-image-actual-width t)
  ;; add svg file for exporting inline svg images during export
  (setq org-export-default-inline-image-rule
	'(("file" . "\\.\\(gif\\|jp\\(?:e?g\\)\\|svg?\\|p\\(?:bm\\|gm\\|ng\\|pm\\)\\|tiff?\\|x\\(?:[bp]m\\)\\)\\'")))
  ;; preserve indentation on export
  (setq org-src-preserve-indentation t)
  ;; I disabled this to make underscores appear proper
  ;; (setq org-pretty-entities t)
  ;; set default compiler to "xelatex" to handle unicode characters
  ;; must be available via $PATH, I installed `mactex` via homebrew on MacOS
  (setq org-latex-compiler "xelatex")
  ;; added `-shell-escape` to support minted package
  (setq org-latex-pdf-process
	(list "latexmk -f -pdf -%latex -shell-escape -interaction=nonstopmode -output-directory=%o %f"))
  :bind  (:map org-mode-map
	       ("C-c l" . org-store-link)
	       ("C-c C-l" . org-insert-link)
	       ("C-x v l" . org-toggle-link-display)))

;; remove under/over line in org source block header/footer
(custom-set-faces
 '(org-block-begin-line ((t (:underline nil))))
 '(org-block-end-line ((t (:overline nil)))))

(add-hook 'org-babel-after-execute-hook 'org-redisplay-inline-images)

;; shortcut to insert source block
(add-to-list 'org-structure-template-alist '("el" . "src emacs-lisp"))
(add-to-list 'org-structure-template-alist '("sp" . "src python"))
(add-to-list 'org-structure-template-alist '("sjp" . "src jupyter-python"))

;; add a customized dvisvgxelatex to the preview process
(customize-set-variable
 'org-preview-latex-process-alist
 (append org-preview-latex-process-alist
	 '((dvisvgmx :programs
		     ("xelatex" "dvisvgm")
		     :description "xdv > svg" :message "you need to install the programs: latex and dvisvgm." :image-input-type "xdv" :image-output-type "svg" :image-size-adjust
		     (1.7 . 1.5)
		     :latex-compiler
		     ("xelatex -no-pdf -interaction nonstopmode -output-directory %o %f")
		     :image-converter
		     ("dvisvgm %f --no-fonts --exact-bbox --scale=%S --output=%O")))))


;; LaTeX preview rendering default to SVG instead of PNG
(setq org-preview-latex-default-process 'dvisvgmx)

;; use engrave-faces to support fontifying source blocks in LaTeX exports
(use-package engrave-faces
  :straight t
  :defer t
  :init
  (setq org-latex-src-block-backend 'engraved))

(setq org-latex-engraved-theme 'nano)

#+end_src

A neat trick for when writing LaTeX snippets is the =C-c C-x C-l= keybinding to show/hide preview of latex. You enclose the expression with =\[= and =\]= or =$=.

For some reason, I'm having trouble (specifically on MacOS) rendering LaTeX fragments within an org document whenever the org file is in any of my Dropbox folder. So here I'm trying to see if changing the temporary directory to be in an absolute local folder instead of a relative one helps. This didn't solve the problem! But going straight to the directory at =~/Library/CloudStorage/Dropbox= does!

#+begin_src emacs-lisp
(setq org-latex-preview-image-directory (expand-file-name "~/.emacs.d/tmp"))
(setq org-latex-preview-ltxpng-directory (expand-file-name "~/.emacs.d/tmp"))
(setq temporary-file-directory (file-truename "~/.emacs.d/tmp"))
#+end_src

To preview images =C-c C-x C-v= or invoke =org-toggle-inline-images=. Images are inserted like regular links, just enclose a path to an image file with =[[<path_to_image>]]=.

To export org files to HTML use ~htmlize~
#+begin_src emacs-lisp
(use-package htmlize
  :straight t)
#+end_src

I want to use Nicolas Rougier's style sheet for exporting org files to HTML, so here's a custom function for that:
#+begin_src emacs-lisp
(defun de/my-org-inline-css-hook (exporter)
  "Insert custom inline css"
  (when (eq exporter 'html)
    (let* ((dir (ignore-errors (file-name-directory (buffer-file-name))))
           (path (concat dir "style.css"))
           (homestyle (or (null dir) (null (file-exists-p path))))
           (final (if homestyle "~/Apps/emacs-config/custom/notebook.css" path))) ;; <- set your own style file path
      (setq org-html-head-include-default-style nil)
      (setq org-html-head (concat
                           "<style type=\"text/css\">\n"
                           "<!--/*--><![CDATA[/*><!--*/\n"
                           (with-temp-buffer
                             (insert-file-contents final)
                             (buffer-string))
                           "/*]]>*/-->\n"
                           "</style>\n")))))

(add-hook 'org-export-before-processing-hook 'de/my-org-inline-css-hook)
#+end_src

Please note that at the moment, there doesn't seem to be a good way to include an SVG file in the HTML export??

To invoke LaTeX preview, =C-c C-x C-l= (danger! don't reverse to C-x C-c .. because that would close a window!)

For citations, I want to use csl styles, so I'll need the ~citeproc~ package
#+begin_src emacs-lisp
(use-package citeproc
  :after org
  :defer t
  :straight t)
#+end_src


* Custom functions

All custom functions are preceded by the prefix ~de/~. All other custom functions that can be called interactively is placed under ~~/Apps/emacs-config/custom~.

Convenient function to reload Emacs config
#+begin_src emacs-lisp
(defun de/reload-emacs-config()
  (interactive)
  "convenient function to reload config file"
  (org-babel-load-file "~/Apps/emacs-config/config.org"))

#+end_src

When programming, I often want to move lines/regions up or down, bound to =Super-<up>/<down>=. 

#+begin_src emacs-lisp
(defun de/move-text-internal (arg)
  (cond
   ((and mark-active transient-mark-mode)
    (if (> (point) (mark))
        (exchange-point-and-mark))
    (let ((column (current-column))
          (text (delete-and-extract-region (point) (mark))))
      (forward-line arg)
      (move-to-column column t)
      (set-mark (point))
      (insert text)
      (exchange-point-and-mark)
      (setq deactivate-mark nil)))
   (t
    (let ((column (current-column)))
      (beginning-of-line)
      (when (or (> arg 0) (not (bobp)))
        (forward-line)
        (when (or (< arg 0) (not (eobp)))
          (transpose-lines arg))
        (forward-line -1))
      (move-to-column column t)))))

(defun de/move-text-up (arg)
  "Move region (if selected) or current line up by ARG lines."
  (interactive "*p")
  (de/move-text-internal (- (or arg 1))))

(defun de/move-text-down (arg)
  "Move region (if selected) or current line down by ARG lines."
  (interactive "*p")
  (de/move-text-internal (or arg 1)))

(global-set-key (kbd "s-<up>") 'de/move-text-up)
(global-set-key (kbd "s-<down>") 'de/move-text-down)

#+end_src

Resizing windows is counter intuitive, so I'd like up/down/left/right to resize the window in the concordant directions. Note that this may not work when in ~org-mode~ because that keybinding may be occupied with something else (I think for doing shift-selection).
#+begin_src emacs-lisp
(global-set-key (kbd "s-C-<left>") 'shrink-window-horizontally)
(global-set-key (kbd "s-C-<right>") 'enlarge-window-horizontally)
(global-set-key (kbd "s-C-<down>") 'shrink-window)
(global-set-key (kbd "s-C-<up>") 'enlarge-window)
#+end_src

The default keybinding to switch to another window is =C-x o=, let's just make this shorter since I use it often. This is being re-bound to ~ace-window~.
#+begin_src emacs-lisp
;; (global-set-key (kbd "M-o") 'other-window)
(use-package ace-window
  :straight t
  :bind
  (("M-o" . ace-window)))
#+end_src

Load my custom functions
#+begin_src emacs-lisp
(load "/Users/delnatan/Apps/emacs-config/custom/DE_fun01.el" t nil t)
#+end_src


** Exporting org files

When exporting an org document to PDF or HTML there are lots of settings that one can use. I've arrived to a particular set of settings that suits my needs at the moment and I put the properties in a single function to conveniently add them at the top of the org document:

#+begin_src emacs-lisp
(defun de/insert-org-export-properties ()
  "Insert common Org properties at the beginning of the document."
  (interactive)
  ;; go to the top of the document
  (goto-char (point-min))
  (insert "#+OPTIONS: html-postamble:nil\n")
  (insert "#+OPTIONS: ^:nil") ;; disable sub/superscript
  (insert "#+LATEX_CLASS: article\n")
  (insert "#+LATEX_CLASS_OPTIONS: [letterpaper]\n")
  (insert "#+LATEX_HEADER: \\usepackage[inkscapelatex=false]{svg}\n")
  (insert "#+LATEX_HEADER: \\usepackage{fontspec}\n")
  (insert "#+LATEX_HEADER: \\usepackage{float}\n")
  (insert "#+LATEX_HEADER: \\setmainfont{Helvetica}\n")
  (insert "#+LATEX_HEADER: \\setsansfont{Helvetica}\n")
  (insert "#+LATEX_HEADER: \\setmonofont{Courier New}\n")
  (insert "#+LATEX_HEADER: \\usepackage[margin=1in]{geometry}\n"))

;; place cursor within the top of the python source block
(defun de/insert-inline-svg-matplotlib ()
  (interactive)
  (insert "import matplotlib_inline\n")
  (insert "matplotlib_inline.backend_inline.set_matplotlib_formats(\"svg\")"))
#+end_src


* Org-agenda
I've started using org-mode for scheduling stuff. For now, I'll just keep any agenda items in my main todo-list.

#+begin_src emacs-lisp
;; setup org-agenda keybinding to `C-c a`
(global-set-key (kbd "C-c a") 'org-agenda)

(setq org-agenda-files
      '(
  	"/Users/delnatan/Library/CloudStorage/Dropbox/org/todo.org"
  	"/Users/delnatan/Documents/org/tasks.org"
  	"/Users/delnatan/StarrLuxtonLab/org/schedules.org"
	"/Users/delnatan/Library/CloudStorage/Dropbox/org/notes/random_notes.org"
  	"/Users/delnatan/Documents/org/meetings.org"
  	"/Users/delnatan/Documents/org/events.org"
  	)
      )

#+end_src


* Org-capture setup

In the templates here's what each placeholder means:
~%?~ is where the cursor will be placed for you to start typing
~%i~ is the initial content
~%a~ is an automatic link to the location where you initiated the capture
~%U~ inserts a timestamp
~%T~ prompts you date and time. Simply enter the date first and click on the desired date in the minibuffer

To prompt for the entry in the minibuffer. use ~%^{prompt}~.
Enter time in a 24-hour format.

You can add priorities to each TODO or notes by adding a =[#1]= (a numeric value to each tag). For example:  =* TODO [#1] my TODO item.= 
Generally, the notes are meant to be refiled so that it would show up when you run =M-x notes-list=. However, the TODO items get added to the calendar.

#+begin_src emacs-lisp
;; set =C-c c= to do org-capture
(define-key global-map (kbd "C-c c") 'org-capture)

;; set templates
(setq org-capture-templates
      '(("t" "TODO" entry (file+headline "~/Documents/org/tasks.org" "Tasks")
    	 "TODO %U %? \n  %i\n" :prepend t)
  	("n" "Note" entry (file+headline "~/Documents/org/notes.org" "Notes")
  	 "* %^{TITLE} :NOTE:\n#+DATE: %<%Y-%m-%d %a>\n#+FILETAGS: note\n#+SUMMARY: %^{SUMMARY}\n#+ICON: material/notebook\n%?\n" :prepend t)
  	("m" "Meeting" entry (file+headline "~/Documents/org/meetings.org" "Meetings")
  	 "* %? :MEETING:\n%^T\n- Location: %^{Location}\n- Participants: %^{Participants}\n- Agenda:\n  - %^{Agenda}\n" :prepend t)
  	("e" "Event" entry (file+headline "~/Documents/org/events.org" "Events")
  	 "* %? :EVENT:\n%^T\n- Location: %^{Location}\n-  %i\n" :prepend t)))

(defun de/org-sort-entries-by-date ()
  "Sort entries in descending order by date"
  (org-sort-entries t ?t))

(add-hook 'org-capture-after-finalize-hook 'de/org-sort-entries-by-date)

;; configure refile targets
(setq org-refile-targets '((nil :maxlevel . 3)
  			   (org-agenda-files :maxlevel . 3)))
#+end_src

The workflow is such: do =C-c n= to capture a note in a new buffer, then save the file and do =C-c C-c= to complete the capture. Do =C-c C-k= to abort capture.

To refile the captured notes and todo lists, do =C-c C-w=, entries can be refiled to files listed in ~org-agenda-files~.


* Miscellaneous support

I use OpenSCAD for 3D printing, so editing the files in Emacs is nice
#+begin_src emacs-lisp
(use-package scad-mode
  :defer t
  :straight (scad-mode :type git :host github :repo "openscad/emacs-scad-mode"))
#+end_src

Sometimes I work with a lot of CSV files when doing data processing using Python
#+begin_src emacs-lisp
(use-package csv-mode
  :defer t
  :straight (csv-mode :type git :host github :repo "emacsmirror/csv-mode"))
#+end_src

For reading pdfs, let's try out pdf-tools, which has a nice 'midnight' mode.
#+begin_src emacs-lisp
(use-package pdf-tools
  :straight (pdf-tools :type git :host github :repo "vedang/pdf-tools")
  :config
  (pdf-tools-install)
  (setq-default pdf-view-display-size 'fit-width)
  (setq pdf-view-midnight-colors '("#2a2523" . "#f8f4ed")))

#+end_src

I started learning TypeScript. Note regarding the Emacs-style regex. ~\\.~ is to match a literal dot in the file name. You need to declare and escape and then ~\.~ to match a dot (because a dot matches any character in regex). The ~\\'~ just means the 'end of string'.

#+begin_src emacs-lisp
(add-to-list 'auto-mode-alist '("\\.js\\'" . js-ts-mode))
(add-to-list 'auto-mode-alist '("\\.ts\\'" . typescript-ts-mode))
(add-to-list 'auto-mode-alist '("\\.[jt]sx\\'" . tsx-ts-mode))

(add-to-list 'major-mode-remap-alist '(javascript-mode . js-ts-mode))
(add-to-list 'major-mode-remap-alist '(typescript-mode . typescript-ts-mode))
#+end_src

Also Rust...
#+begin_src emacs-lisp
(use-package rust-mode
  :straight t
  :mode "\\.rs\\'"
  :init
  (setq rust-indent-offset 4)
  (setq rust-format-on-save t)
  :config
  (add-hook 'rust-mode-hook 'eglot-ensure)
  :bind (:map rust-mode-map
              ("C-c C-c" . rust-run)
              ("C-c C-t" . rust-test)
              ("C-c C-b" . rust-compile)))

(use-package cargo
  :straight t
  :hook (rust-mode . cargo-minor-mode))

#+end_src

Finally, trying ~magit~!
#+begin_src emacs-lisp
(use-package magit
  :straight t
  :bind (("C-x g" . magit-status)))
#+end_src

** Snippets
#+begin_src emacs-lisp
(use-package yasnippet
  :straight t
  :hook ((org-mode prog-mode) . yas-minor-mode-on)
  :init
  (setq yas-snippet-dirs '("~/.emacs.d/snippets")))
#+end_src


** LLM in Emacs

#+begin_src emacs-lisp
(use-package ellama
  :init
  (setopt ellama-keymap-prefix "C-c e")
  (require 'llm-ollama)
  (setopt ellama-provider
  	  (make-llm-ollama
  	   :chat-model "llama3.1:latest"
  	   :embedding-model "llama3.1:latest")))

#+end_src


* E-mail setup

** use-package & mu4e configuration
#+begin_src emacs-lisp
(use-package mu4e
  :straight nil
  :load-path "/opt/homebrew/Cellar/mu/1.12.5/share/emacs/site-lisp/mu/mu4e"
  :config
  (require 'mu4e-contrib)
  (require 'smtpmail)
  
  (setq mu4e-mu-binary (executable-find "mu"))
  ;; this is the directory we created before:
  (setq mu4e-maildir "~/.maildir")
  ;; this command is called to sync imap servers:
  (setq mu4e-get-mail-command (concat (executable-find "mbsync") " -a"))
  ;; how often to call it in seconds:
  (setq mu4e-update-interval 300)
  ;; save attachment to desktop by default
  ;; or another choice of yours:
  (setq mu4e-attachment-dir "~/Downloads/MailAttachments/")
  ;; rename files when moving - needed for mbsync:
  (setq mu4e-change-filenames-when-moving t)
  ;; list of your email adresses:
  (setq mu4e-user-mail-address-list '("delnatan@gmail.com"
				      "delnatan@ucdavis.edu"))
  (setq mu4e-maildir-shortcuts
	'(("/gmail/INBOX" . ?g)
          ("/gmail/Sent" . ?G)
	  ("/ucd/INBOX" . ?u)
	  ("/ucd/Sent" . ?U)))

  ;; add bookmark
  ;; (add-to-list 'mu4e-bookmarks
  ;; 	       (mu4e-bookmark-define
  ;; 		"maildir:/gmail/INBOX"
  ;; 		"Inbox - Gmail"
  ;; 		?g))

  (setq mu4e-contexts
	`(,(make-mu4e-context
            :name "gmail"
            :enter-func
            (lambda () (mu4e-message "Enter delnatan@gmail.com context"))
            :leave-func
            (lambda () (mu4e-message "Leave delnatan@gmail.com context"))
            :match-func
            (lambda (msg)
              (when msg
		(mu4e-message-contact-field-matches
		 msg :to "delnatan@gmail.com")))
            :vars '((user-mail-address . "delnatan@gmail.com")
                    (user-full-name . "Daniel Elnatan")
                    (mu4e-drafts-folder . "/gmail/Drafts")
                    (mu4e-refile-folder . "/gmail/Archive")
                    (mu4e-sent-folder . "/gmail/Sent")
                    (mu4e-trash-folder . "/gmail/Trash")))
	  ,(make-mu4e-context
	    :name "UCD"
	    :enter-func
	    (lambda () (mu4e-message "Enter delnatan@ucdavis.edu context"))
	    :leave-func
	    (lambda () (mu4e-message "Leave delnatan@ucdavis.edu context"))
	    :match-func
	    (lambda (msg)
	      (when msg
		(mu4e-message-contact-field-matches
		 msg :to "delnatan@ucdavis.edu")))
	    :vars `((user-mail-address . "delnatan@ucdavis.edu")
		    (user-full-name . "Daniel Elnatan")
		    (mu4e-drafts-folder . "/ucd/Drafts")
		    (mu4e-refile-folder . "/ucd/Archive")
		    (mu4e-sent-folder . "/ucd/Sent")
		    (mu4e-trash-folder . "/ucd/Deleted Items")))))
  
  ;; start with the first (default) context
  (setq mu4e-context-policy 'pick-first)
  ;; ask for context if no context matches
  (setq mu4e-compose-context-policy 'ask)

  ;; use smtp
  (setq message-send-mail-function 'message-send-mail-with-sendmail)
  (setq sendmail-program "msmtp")
  )


#+end_src

Using Nicolas Rougier's ~mu4e-dashboard~

#+begin_src emacs-lisp
(use-package async
  :straight t)

(add-to-list 'load-path "~/Apps/emacs/mu4e-dashboard/")

;; ensure that mu4e-dashboard is loaded after executing mu4e
(with-eval-after-load 'mu4e (require 'mu4e-dashboard))
#+end_src


** Notes on setting up ~isync~ and ~mu4~

~mu~ was installed via Homebrew in MacOS, and it actually comes with ~mu4e~, so I need to point use-package to use the files that were installed by homebrew in ~/opt/homebrew/Cellar/mu/1.12.5/share/emacs/site-lisp/mu/mu4e~.

Setting up gmail was relatively trivial by using "App password", following the guide in [[https://macowners.club/posts/email-emacs-mu4e-macos/]], I was able to get pretty far.

But when setting up the UC Davis e-mail, this was when things got pretty hairy. I had to basically re-build ~isync~ from source instead of using whatever the homebrew recipe for ~isync~ does. This was because isync, when installed via the standard recipe via homebrew, uses Apple's internal SASL library. You can check this by running:

~otool -L $(which mbsync)~

You can see that it uses the library from ~/usr/lib~.

Now, the "modern" microsoft exchange 365 authentication method needs /XOAUTH2/, which you can install from [[https://github.com/moriyoshi/cyrus-sasl-xoauth2]], but you first need to install ~cyrus-sasl~ from homebrew. Make sure than when you run ~pluginviewer~ (from cyrus-sasl), that the 'xoauth2' is present. You can do this by specifying that ~./configure --with-cyrus-sasl=/path/to/cyrus-sasl~, when building the xoauth2 plugin.

In addition, you need to register your 'web app' in microsoft's [[https://portal.azure.com][Azure portal]]. 

Do this in conjunction with installing the python command line ~oauth2ms~ ([[https://github.com/harishkrupo/oauth2ms]]), follow the guide there. It would take you pretty far. I installed the python package until my 'utils' conda environment, which was added as a "shebang" line at the top of the oauth2ms script. Here are my settings for mbsync and smtp:

=~/.mbsyncrc=:
#+begin_example
######################################################################
# GMAIL IMAP SETUP for mbsync (isync)                                #
######################################################################
IMAPAccount gmail
Host imap.gmail.com
User delnatan@gmail.com
PassCmd "security find-generic-password -s isync-gmail -a delnatan@gmail.com -w"
Port 993
TLSType IMAPS
TLSVersions +1.2
AuthMechs PLAIN
SystemCertificates no
CertificateFile ~/.maildir/certificates/root-certificates.pem

IMAPStore gmail-remote
Account gmail

MaildirStore gmail-local
SubFolders Verbatim
Path ~/.maildir/gmail/
Inbox ~/.maildir/gmail/INBOX/

Channel gmail
Far :gmail-remote:
Near :gmail-local:
Patterns *
Create Near
Sync All
Expunge Both
SyncState *


######################################################################
# EXCHANGE UCD EMAIL                                                 #
######################################################################
IMAPAccount ucd
User delnatan@ucdavis.edu
Host outlook.office365.com
Port 993
TLSType IMAPS
TLSVersions +1.2
PassCmd oauth2ms
AuthMechs XOAUTH2
CertificateFile ~/.maildir/certificates/root-certificates.pem

IMAPStore ucd-remote
Account ucd

MaildirStore ucd-local
SubFolders Verbatim
Path ~/.maildir/ucd/
Inbox ~/.maildir/ucd/INBOX

Channel ucd
Far :ucd-remote:
Near :ucd-local:
Patterns *
Create Near
Sync All
Expunge Both
SyncState *

#+end_example

Note that I use "TLSVersions", which is presumable new in isync 1.5.0 because the previous keyword "SSLversions" has been deprecated. It requires the version value to have +/- signs.

As for the oauth2ms configuration, make sure you (requests are subject to approval of the azure account, mine was approved within a business day) get the details from the azure portal and put them in the config like below:
=~/.config/oauth2ms/config.json=:
#+begin_src json
{
    "tenant_id": "<your_tenant_id>"
    "client_id": "<your_client_id>",
    "client_secret": "<your_client_secret>",
    "redirect_host": "localhost",
    "redirect_port": "5123",
    "redirect_path": "/getToken/",
    "scopes": [
	"https://outlook.office.com/IMAP.AccessAsUser.All",
	"https://outlook.office.com/SMTP.Send"
    ]
}
#+end_src

The port number is arbitrary, I just chose something that I don't typically use.

Once done, run ~mbsync -aV~. Then, initialize ~mu~ by running:

#+begin_src bash
mu init -m ~/.maildir \
   --my-address delnatan@gmail.com \
   --my-address delnatan@ucdavis.edu

mu index
#+end_src

To send e-mails, SMTP needs to be setup properly also.

=~/.msmtprc=:
#+begin_example
# SMTP, for sending e-mails

# Default values for all accounts
defaults
logfile ~/.maildir/msmtp.log
tls_trust_file ~/.maildir/certificates/root-certificates.pem

######################################################################
# GMAIL SMTP                                                         #
######################################################################
account gmail
auth on
host smtp.gmail.com
port 465
protocol smtp
from delnatan@gmail.com
user delnatan
passwordeval security find-generic-password -s isync-gmail -a delnatan@gmail.com -w
tls on
tls_starttls off

######################################################################
# UCD Exchange (office 365)                                          #
######################################################################
account ucd
host smtp.office365.com
port 587
user delnatan@ucdavis.edu
from delnatan@ucdavis.edu
auth xoauth2
passwordeval "oauth2ms"
tls on
tls_starttls on
tls_certcheck on

######################################################################
account default : gmail
#+end_example

